# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xAjTaYiOZt8hIAcb6M-ogmSjRTNjU81U
"""

import os, re, uuid, getpass
from pathlib import Path
import numpy as np
import pandas as pd
from dotenv import load_dotenv
from openai import OpenAI
import faiss
from rapidfuzz import fuzz

# ================== ΒΑΣΙΚΕΣ ΡΥΘΜΙΣΕΙΣ ==================
load_dotenv()

EMBED_MODEL = os.getenv("EMBED_MODEL", "text-embedding-3-large")
DIM = 3072
NORMALIZE = True
BATCH = 128

INDEX_DIR = Path("vector_index")
INDEX_PATH = INDEX_DIR / "hnsw.index"
META_PATH  = INDEX_DIR / "meta.parquet"

# Μπορείς να αλλάξεις το όνομα του 2ου API key εδώ:
OTHER_API_KEY_NAME = "OTHER_API_KEY"

# ================== HELPERS ==================
def clean_text(t: str) -> str:
    return re.sub(r"\s+", " ", str(t)).strip()

def normalize_rows(x: np.ndarray) -> np.ndarray:
    n = np.linalg.norm(x, axis=1, keepdims=True) + 1e-12
    return x / n

def embed_texts(client, texts):
    embs = []
    for i in range(0, len(texts), BATCH):
        chunk = texts[i:i+BATCH]
        resp = client.embeddings.create(model=EMBED_MODEL, input=chunk)
        embs.extend([e.embedding for e in resp.data])
    X = np.array(embs, dtype="float32")
    return normalize_rows(X) if NORMALIZE else X

def embed_one(client, text: str) -> np.ndarray:
    resp = client.embeddings.create(model=EMBED_MODEL, input=[text])
    v = np.array([resp.data[0].embedding], dtype="float32")
    return normalize_rows(v) if NORMALIZE else v

def read_keywords_csv(path: Path) -> list[str]:
    df = pd.read_csv(path)
    col = "keyword" if "keyword" in df.columns else df.columns[0]
    s = df[col].astype(str)
    seen, out = set(), []
    for x in s:
        x = clean_text(x)
        if x and x not in seen:
            seen.add(x); out.append(x)
    return out

def save_to_env(pairs: dict[str, str], env_path: Path = Path(".env")):
    existing = {}
    if env_path.exists():
        for line in env_path.read_text(encoding="utf-8").splitlines():
            if "=" in line and not line.strip().startswith("#"):
                k, v = line.split("=", 1)
                existing[k.strip()] = v.strip()
    existing.update(pairs)
    lines = [f"{k}={v}" for k, v in existing.items()]
    env_path.write_text("\n".join(lines) + "\n", encoding="utf-8")
    print(f">> Αποθηκεύτηκαν στο {env_path} (να ΜΗΝ γίνει commit).")

def ask_yesno(msg: str, default_yes=True) -> bool:
    suffix = "[Y/n]" if default_yes else "[y/N]"
    ans = input(f"{msg} {suffix} ").strip().lower()
    if not ans:
        return default_yes
    return ans in ("y","yes","nai","ναι")

# ================== INTERACTIVE START ==================
def interactive_collect_credentials_and_csv():
    print("=== Ρυθμίσεις Εκκίνησης ===")
    openai_key = os.getenv("OPENAI_API_KEY", "").strip()
    other_key  = os.getenv(OTHER_API_KEY_NAME, "").strip()

    if not openai_key:
        print("Δώσε OPENAI_API_KEY (δεν θα φαίνεται):")
        openai_key = getpass.getpass("OPENAI_API_KEY: ").strip()
        if not openai_key:
            raise RuntimeError("Χρειάζεται OPENAI_API_KEY.")

    if not other_key:
        print(f"Δώσε {OTHER_API_KEY_NAME} (δεν θα φαίνεται):")
        other_key = getpass.getpass(f"{OTHER_API_KEY_NAME}: ").strip()
        if not other_key:
            raise RuntimeError(f"Χρειάζεται {OTHER_API_KEY_NAME}.")

    # Βάλε τα και στο περιβάλλον για runtime
    os.environ["OPENAI_API_KEY"] = openai_key
    os.environ[OTHER_API_KEY_NAME] = other_key

    # Προαιρετικά σώσε τα στο .env
    if ask_yesno("Αποθήκευση κλειδιών στο .env;"):
        save_to_env({"OPENAI_API_KEY": openai_key, OTHER_API_KEY_NAME: other_key})

    # Ρώτα για CSV (μπορεί να είναι private path)
    while True:
        csv_path_str = input("Δώσε διαδρομή CSV με keywords (π.χ. data/keywords.csv): ").strip().strip('"').strip("'")
        if not csv_path_str:
            print("Παρακαλώ γράψε διαδρομή.")
            continue
        csv_path = Path(csv_path_str)
        if not csv_path.exists():
            print(f"Δεν βρέθηκε αρχείο: {csv_path}")
            continue
        try:
            kws = read_keywords_csv(csv_path)
            if not kws:
                print("Το CSV φαίνεται άδειο. Δώσε άλλο αρχείο.")
                continue
            return openai_key, other_key, csv_path, kws
        except Exception as e:
            print(f"Σφάλμα ανάγνωσης CSV: {e}. Δώσε άλλο αρχείο.")

# ================== INDEX OPS ==================
def build_index_from_keywords(keywords: list[str], openai_key: str):
    if not keywords:
        raise ValueError("Άδεια λίστα keywords.")
    INDEX_DIR.mkdir(exist_ok=True, parents=True)

    client = OpenAI(api_key=openai_key)
    X = embed_texts(client, keywords)

    idx = faiss.IndexHNSWFlat(DIM, 64, faiss.METRIC_INNER_PRODUCT)
    idx.hnsw.efConstruction = 200
    idx.hnsw.efSearch = 64
    idx.add(X)

    meta = pd.DataFrame({
        "doc_id": [str(uuid.uuid4()) for _ in keywords],
        "keyword": keywords
    })
    faiss.write_index(idx, str(INDEX_PATH))
    meta.to_parquet(META_PATH, index=False)
    print(f"OK: Φτιάχτηκε index με {idx.ntotal} keywords.")

def load_index_and_meta():
    if not (INDEX_PATH.exists() and META_PATH.exists()):
        raise RuntimeError("Δεν βρέθηκε index. Χτίσε τον πρώτα.")
    idx = faiss.read_index(str(INDEX_PATH))
    meta = pd.read_parquet(META_PATH)
    return idx, meta

# ================== SEARCH OPS ==================
def search_by_query(text_query: str, k: int = 10, openai_key: str = ""):
    client = OpenAI(api_key=openai_key)
    idx, meta = load_index_and_meta()

    qv = embed_one(client, clean_text(text_query))
    topn = min(max(k*5, k), len(meta))
    D, I = idx.search(qv, topn)

    cand = meta.iloc[I[0]].copy()
    cand["score_vec"] = D[0]
    cand["keyword_boost"] = cand["keyword"].fillna("").apply(
        lambda t: fuzz.token_set_ratio(text_query, str(t))/100.0
    )
    cand["final_score"] = 0.9*cand["score_vec"] + 0.1*cand["keyword_boost"]
    out = cand.sort_values("final_score", ascending=False).head(k)[["keyword","final_score"]]
    return out.reset_index(drop=True)

def search_by_article_file(path: Path, k: int = 10, openai_key: str = ""):
    text = Path(path).read_text(encoding="utf-8")
    client = OpenAI(api_key=openai_key)
    idx, meta = load_index_and_meta()

    qv = embed_one(client, clean_text(text))
    topn = min(max(k*5, k), len(meta))
    D, I = idx.search(qv, topn)

    cand = meta.iloc[I[0]].copy()
    cand["score_vec"] = D[0]
    cand["keyword_boost"] = cand["keyword"].fillna("").apply(
        lambda t: fuzz.token_set_ratio(text, str(t))/100.0
    )
    cand["final_score"] = 0.9*cand["score_vec"] + 0.1*cand["keyword_boost"]
    out = cand.sort_values("final_score", ascending=False).head(k)[["keyword","final_score"]]
    return out.reset_index(drop=True)

# ================== APP FLOW ==================
def main():
    # 1) Ζήτα 2 keys + CSV στην αρχή
    openai_key, other_key, csv_path, keywords = interactive_collect_credentials_and_csv()

    # 2) Χτίσε index (πάντα ή ρώτα αν θες full control)
    if INDEX_PATH.exists() or META_PATH.exists():
        if ask_yesno("Υπάρχει ήδη index. Θες να τον ξαναχτίσω από το CSV;", default_yes=False):
            build_index_from_keywords(keywords, openai_key)
    else:
        build_index_from_keywords(keywords, openai_key)

    # 3) Loop μενού
    while True:
        print("\n=== Μενού ===")
        print("1) Αναζήτηση με μικρή φράση")
        print("2) Αναζήτηση με πλήρες άρθρο (.txt)")
        print("3) Έξοδος")
        choice = input("Επιλογή [1/2/3]: ").strip()

        if choice == "1":
            q = input("Γράψε το query: ").strip()
            if not q:
                print("Κενό query.")
                continue
            try:
                res = search_by_query(q, k=10, openai_key=openai_key)
                print("\nΑποτελέσματα:")
                print(res.to_string(index=False))
            except Exception as e:
                print(f"Σφάλμα: {e}")

        elif choice == "2":
            p = input("Δώσε διαδρομή .txt με το άρθρο: ").strip().strip('"').strip("'")
            if not p:
                print("Κενό path.")
                continue
            try:
                res = search_by_article_file(Path(p), k=10, openai_key=openai_key)
                print("\νΑποτελέσματα:")
                print(res.to_string(index=False))
            except Exception as e:
                print(f"Σφάλμα: {e}")

        elif choice == "3":
            print("Έξοδος. 👋")
            break
        else:
            print("Μη έγκυρη επιλογή. Διάλεξε 1/2/3.")

if __name__ == "__main__":
    main()