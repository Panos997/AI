# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LBRU4Cjd-tQNOzFYzUQJa0zo-4UP-Ma9

src/auto_tagging_generator/ui.py
"""

import html, uuid
import ipywidgets as w
from IPython.display import display, HTML
from .styles import WELCOME_AND_APP_CSS
from .genai_client import init_client, validate_key, generate_tags

def show_welcome(on_success):
    display(HTML(WELCOME_AND_APP_CSS))
    head = w.HTML("<div class='k-head'>üîë Welcome ‚Äî Gemini API key required</div>")
    body = w.HTML("<div class='k-body'><p>This notebook uses Google Gemini (GenAI). Paste your <b>Gemini API key</b> below.</p></div>")
    key = w.Password(placeholder="Paste your GEMINI API key here‚Ä¶"); key.add_class("k-input")
    btn = w.Button(description="Continue", icon="check"); btn.add_class("k-btn")
    status = w.Output()
    card = w.VBox([head, w.VBox([body, key, btn, status])]); card.add_class("k-card")
    box = w.HBox([card], layout=w.Layout(justify_content='center', align_items='center', min_height='46vh'))
    display(box)

    def _go(_):
        status.clear_output()
        try:
            client = init_client(key.value.strip())
            validate_key(client)
        except Exception as e:
            with status: display(HTML(f"<div class='k-err'><b>Error:</b> {html.escape(str(e))}</div>"))
            return
        on_success(client)  # callback

    btn.on_click(_go)

def build_main_ui(client):
    head = w.HTML("<div class='k-head2'>Tag Generator</div>")
    ta = w.Textarea(placeholder="Paste your article text here...", layout=w.Layout(width='100%', height='200px'))
    ta.add_class("k-textarea")
    max_tags = w.IntSlider(value=5, min=1, max=10, step=1, description='Max tags:', continuous_update=False)
    model_dd = w.Dropdown(options=['gemini-2.5-flash','gemini-2.0-flash'], value='gemini-2.5-flash', description='Model:')
    btn_gen = w.Button(description="Generate Tags", button_style='primary', icon='bolt')
    btn_demo = w.Button(description="Demo text", icon='book')
    btn_clear = w.Button(description="Clear", icon='trash')
    chars = w.HTML("<span class='k-pill'>Chars: <b>0</b></span>")
    words = w.HTML("<span class='k-pill'>Words: <b>0</b></span>")
    tokens = w.HTML("<span class='k-pill'>~Tokens: <b>0</b></span>")
    out = w.Output()

    def render_tags(tags):
        if not tags: return HTML("<div style='margin-top:8px'><em>No tags generated</em></div>")
        chips = "".join(f"<span class='k-chip'>#{html.escape(str(t))}</span>" for t in tags)
        joined = ", ".join(map(str, tags))
        btn_id, payload_id = "copy_" + uuid.uuid4().hex, "payload_" + uuid.uuid4().hex
        return HTML(f"""
          <div style="display:flex;justify-content:flex-start;margin-top:6px;margin-bottom:6px">
            <button id="{btn_id}" class="k-copy">Copy generated tags</button>
          </div>
          <div style="margin-top:4px">{chips}</div>
          <span id="{payload_id}" style="display:none">{html.escape(joined)}</span>
          <script>(function(){{
            const b=document.getElementById("{btn_id}"), p=document.getElementById("{payload_id}");
            if(b&&p)b.addEventListener('click',async()=>{{try{{await navigator.clipboard.writeText(p.textContent);}}
            catch(e){{const r=document.createRange();r.selectNode(p);const s=window.getSelection();
            s.removeAllRanges();s.addRange(r);document.execCommand('copy');s.removeAllRanges();}}
            const old=b.textContent;b.textContent='Copied!';setTimeout(()=>b.textContent=old,1200);}});}})();
          </script>
        """)

    def update_metrics(_=None):
        txt = ta.value or ""
        n_chars = len(txt); n_words = len([w for w in txt.split() if w.strip()])
        tokens.value = f"<span class='k-pill'>~Tokens: <b>{int(n_words*1.3)}</b></span>"
        chars.value = f"<span class='k-pill'>Chars: <b>{n_chars}</b></span>"
        words.value = f"<span class='k-pill'>Words: <b>{n_words}</b></span>"
        ta.layout.height = f"{max(180, min(520, (txt.count('\\n')+2)*22))}px"

    def demo(_):
        ta.value = ("The Greek economy recorded strong growth in the last quarter, "
                    "driven by exports and tourism. Analysts estimate the upward trend "
                    "will continue provided fiscal stability is maintained and "
                    "investments in the green transition are strengthened.")
    def clear(_): ta.value = ""

    def generate(_):
        out.clear_output()
        txt = ta.value.strip()
        if not txt:
            with out: print("‚ö†Ô∏è Please paste some text first."); return
        btn_gen.disabled, old_desc, old_icon = True, btn_gen.description, btn_gen.icon
        btn_gen.description, btn_gen.icon = "Working‚Ä¶", "hourglass"
        try:
            tags = generate_tags(client, txt, max_tags=max_tags.value, model_name=model_dd.value)
            with out: display(render_tags(tags))
        except Exception as e:
            with out: print("‚ùå Error:", e)
        finally:
            btn_gen.description, btn_gen.icon = old_desc, old_icon
            btn_gen.disabled = False

    ta.observe(update_metrics, names='value')
    btn_demo.on_click(demo); btn_clear.on_click(clear); btn_gen.on_click(generate)
    top = w.HBox([btn_gen, btn_demo, btn_clear, w.HTML("<span style='flex:1'></span>"), chars, words, tokens])
    mid = w.HBox([max_tags, model_dd])
    body = w.VBox([top, ta, mid, out], layout=w.Layout(padding='12px 14px'))
    wrapper = w.VBox([w.HTML("<div class='k-head2'>Tag Generator</div>"), body]); wrapper.add_class("k-wrap")
    update_metrics()
    display(wrapper)

def run_app():
    def _mount(client):
        # œåœÑŒ±ŒΩ œÑŒø key valid ‚Üí Œ∫Œ±Œ∏Œ¨œÅŒπœÉŒµ œÑŒø output Œ∫Œ±Œπ Œ¥ŒµŒØŒæŒµ œÑŒø UI
        display(HTML(WELCOME_AND_APP_CSS))  # ensure styles exist
        build_main_ui(client)
    show_welcome(on_success=_mount)