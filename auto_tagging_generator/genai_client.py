# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LBRU4Cjd-tQNOzFYzUQJa0zo-4UP-Ma9

src/auto_tagging_generator/genai_client.py
"""

import os, json, textwrap
from typing import List
from google import genai
from google.genai.errors import APIError

def init_client(api_key: str | None = None) -> genai.Client:
    key = api_key or os.getenv("GEMINI_API_KEY")
    if not key:
        raise ValueError("Missing GEMINI_API_KEY")
    return genai.Client(api_key=key)

def validate_key(client: genai.Client) -> None:
    client.models.generate_content(
        model="gemini-2.5-flash",
        contents="OK",
        config={"max_output_tokens": 8}
    )

def generate_tags(client: genai.Client, article_text: str, max_tags: int = 5,
                  model_name: str = "gemini-2.5-flash") -> List[str]:
    if not article_text.strip():
        return []
    schema = {"type":"object","properties":{"tags":{"type":"array","items":{"type":"string"}}},"required":["tags"]}
    prompt = textwrap.dedent(f"""
      You are an expert content analyst. Read the article and return at most {max_tags} relevant tags.
      Return only JSON: {{ "tags": ["tag1", "tag2", ...] }}

      ARTICLE:
      {article_text}
    """)
    resp = client.models.generate_content(
        model=model_name, contents=prompt,
        config={"response_mime_type":"application/json","response_schema":schema}
    )
    data = json.loads(resp.text or "{}")
    tags = data.get("tags", [])
    clean, seen = [], set()
    for t in tags:
        t2 = (t or "").strip()
        if t2 and t2.lower() not in seen:
            seen.add(t2.lower()); clean.append(t2)
    return clean[:max_tags]